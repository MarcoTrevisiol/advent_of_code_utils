defmodule AOC do
  @moduledoc """
  Advent of Code solution module macro and helpers.

  This module contains the `aoc/3` macro, which should be used to write a solution module for a
  given advent of code challenge. The intended use is to write your solution for day `<day>`, year
  `<year>` as follows:

  ```
  import AOC

  aoc <year>, <day> do
    def p1(input) do
      # Part 1 solution goes here
    end

    def p2(input) do
      # Part 1 solution goes here
    end
  end
  ```

  Writing a solution module with the `aoc/3` macro enables you to use the functions defined in the
  `AOC.IEx` module to test your solutions with ease. For instance, you can use `AOC.IEx.p1e/1` to
  call `p1` with the example input of the current day and `AOC.IEx.p1i/1` to call `p1` with the
  puzzle input of the current day. Similar functions are available for `p2`.

  Note that the code skeleton shown above can be generated by running `mix aoc.gen` or `mix aoc`.
  """
  alias AOC.Helpers

  @doc """
  Part 1 solution.

  Must accept a string which represents the puzzle or example input.
  """
  @callback p1(String.t()) :: any()

  @doc """
  Part 2 solution.

  Must accept a string which represents the puzzle or example input.
  """
  @callback p2(String.t()) :: any()

  @doc """
  Generate an advent of code solution module for a given year and day.

  The generated module will be named `Y<year>.D<day>`. The helpers in `AOC.IEx` rely on this
  convention to find your solution module.

  ## Examples

  ```
  import AOC

  aoc 2020, 1 do
    def some_function do
      :foo
    end
  end
  ```

  is equivalent to:

  ```
  defmodule Y2020.D1 do
    @behaviour AOC

    def some_function do
      :foo
    end
  end
  ```
  """
  defmacro aoc(year, day, do: body) do
    quote do
      defmodule unquote(Helpers.module_name(year, day)) do
        @behaviour AOC

        unquote(body)
      end
    end
  end

  @doc """
  Like `aoc_test/3`, but with additional customization

  This module works like `aoc_test/3`, but enables additional customization. The following options
  are accepted:

  * `module`: specifies the module to import and to run doctests on (default: `Y<year>.D<day>`).
  * `exunit`: specifies the options passed to `use ExUnit` (default: `async: true`)

  `aoc_test(2009, 12, [module: Foo, exunit: []], do: nil)` will expand to:

  ```
  defmodule Y2009.D12.AOCTest do
    use ExUnit.Case, []

    @moduletag date: ~D[2009-12-12]
    @moduletag year: 2009
    @moduletag day: 12

    import Foo
    doctest Foo
  end
  ```

  """
  defmacro aoc_test(year, day, opts, do: body) do
    target_module = opts[:module] || Helpers.module_name(year, day)
    exunit_opts = opts[:exunit] || [async: true]

    quote do
      defmodule unquote(Helpers.test_module_name(year, day)) do
        use ExUnit.Case, unquote(exunit_opts)

        @moduletag date: unquote(Macro.escape(Date.new!(year, 12, day)))
        @moduletag year: unquote(year)
        @moduletag day: unquote(day)

        import unquote(target_module)
        unquote(body)
        doctest unquote(target_module)
      end
    end
  end
end
